// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  image String?
  email String? @unique
  emailVerified DateTime?
  role Role @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userTechnos Json[]

  sessions Session[]
  accounts Account[]

}

enum Role {
  USER
  ENTERPRISE
  ADMIN
  SUPERADMIN
}

model Technologie {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  isValid Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  categoryId String @db.ObjectId

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  technologies Technologie[]

}
// NextAuth Token 

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String @unique
  userId String @db.ObjectId
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}